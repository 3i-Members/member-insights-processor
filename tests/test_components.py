#!/usr/bin/env python3
"""
Simple test script to demonstrate working components of the Member Insights Processor
"""

import sys
import os
from pathlib import Path

# Add src directory to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from context_management.config_loader import create_config_loader
from context_management.markdown_reader import create_markdown_reader
from data_processing.log_manager import create_log_manager
from output_management.markdown_writer import create_markdown_writer

def test_config_loader():
    """Test the configuration loader"""
    print("🔧 Testing Configuration Loader...")
    
    config_loader = create_config_loader()
    
    # Test configuration loading
    available_types = config_loader.get_available_eni_types()
    print(f"   ✅ Available ENI types: {available_types}")
    
    # Test context file mapping
    consultant_path = config_loader.get_context_file_path("professional", "consultant")
    print(f"   ✅ Consultant context path: {consultant_path}")
    
    # Test system prompt mapping
    summary_prompt = config_loader.get_system_prompt_path("member_summary")
    print(f"   ✅ Member summary prompt path: {summary_prompt}")
    
    print("   ✅ Configuration loader working correctly!\n")

def test_markdown_reader():
    """Test the markdown reader"""
    print("📖 Testing Markdown Reader...")
    
    reader = create_markdown_reader()
    
    # Test reading existing context files
    consultant_content = reader.read_context_file("professional", "consultant")
    if consultant_content:
        print(f"   ✅ Read consultant context ({len(consultant_content)} characters)")
        print(f"   📄 Preview: {consultant_content[:100]}...")
    
    # Test listing available files
    available_files = reader.list_available_context_files()
    print(f"   ✅ Available context files: {available_files}")
    
    print("   ✅ Markdown reader working correctly!\n")

def test_log_manager():
    """Test the log manager"""
    print("📊 Testing Log Manager...")
    
    log_manager = create_log_manager()
    
    # Test logging functionality
    test_contact = "TEST_CONTACT_001"
    test_eni = "TEST_ENI_001"
    
    # Check if processed
    is_processed = log_manager.check_if_processed(test_contact, test_eni)
    print(f"   ✅ Contact {test_contact} processed: {is_processed}")
    
    # Mark as processed
    log_manager.mark_as_processed(test_contact, test_eni)
    print(f"   ✅ Marked {test_contact}/{test_eni} as processed")
    
    # Check again
    is_processed = log_manager.check_if_processed(test_contact, test_eni)
    print(f"   ✅ Contact {test_contact} processed now: {is_processed}")
    
    # Get stats
    stats = log_manager.get_processing_stats()
    print(f"   ✅ Processing stats: {stats['total_contacts']} contacts, {stats['total_processed_eni_ids']} ENI IDs")
    
    print("   ✅ Log manager working correctly!\n")

def test_markdown_writer():
    """Test the markdown writer"""
    print("✍️  Testing Markdown Writer...")
    
    writer = create_markdown_writer()
    
    # Test writing a sample summary
    test_contact = "CNT-7if002332"
    test_eni = "ENI-TEST-001"
    test_content = """# Member Analysis for CNT-7if002332

## Member Overview
This is a test member analysis generated by the Member Insights Processor system.

## Key Insights
- High engagement with technical content
- Strong interest in professional development
- Active in networking events

## Recommendations
- Invite to advanced technical workshops
- Connect with other senior professionals
- Provide leadership development opportunities
"""
    
    file_path = writer.write_summary(
        contact_id=test_contact,
        eni_id=test_eni,
        content=test_content,
        additional_metadata={
            "test_run": True,
            "system_version": "1.0.0"
        }
    )
    
    if file_path:
        print(f"   ✅ Created test summary file: {file_path}")
        
        # Read it back
        summary_data = writer.read_existing_summary(test_contact, test_eni)
        if summary_data:
            print(f"   ✅ Read back summary ({len(summary_data['content'])} characters)")
    
    print("   ✅ Markdown writer working correctly!\n")

def main():
    """Run all component tests"""
    print("🚀 Member Insights Processor - Component Testing\n")
    
    try:
        test_config_loader()
        test_markdown_reader()
        test_log_manager()
        test_markdown_writer()
        
        print("🎉 All components tested successfully!")
        print("\n📋 Summary:")
        print("   ✅ Configuration system working")
        print("   ✅ Context file reading working")
        print("   ✅ Processing logs working")
        print("   ✅ Markdown output working")
        print("\n💡 To test with real data, you would need:")
        print("   - Valid BigQuery credentials and project")
        print("   - Gemini API key from Google AI Studio")
        print("   - Optional: Airtable API credentials")
        
    except Exception as e:
        print(f"❌ Error during testing: {str(e)}")
        return 1
    
    return 0

if __name__ == "__main__":
    # Change to the correct directory for running tests
    test_dir = Path(__file__).parent.parent
    os.chdir(test_dir)
    
    exit(main()) 